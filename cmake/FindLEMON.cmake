# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
# file Copyright.txt or https://cmake.org/licensing for details.

#.rst:
# FindLEMON
# ---------
#
# Find ``lemon`` executable and provide a macro to generate custom build rules.
#
# The module defines the following variables:
#
# ``LEMON_EXECUTABLE``
#   path to the ``lemon`` program
#
# ``LEMON_VERSION``
#   version of ``lemon``
#
# ``LEMON_FOUND``
#   true if the program was found
#
# The minimum required version of ``lemon`` can be specified using the
# standard CMake syntax, e.g.  ``find_package(LEMON 2.1.3)``.
#
# If ``lemon`` is found, the module defines the macro::
#
#   LEMON_TARGET(<Name> <YaccInput> <CodeOutput>
#                [COMPILE_FLAGS <flags>]
#                [DEFINES_FILE <file>]
#                [VERBOSE [<file>]]
#                [REPORT_FILE <file>]
#                )
#
# which will create a custom rule to generate a parser.  ``<YaccInput>`` is
# the path to a yacc file.  ``<CodeOutput>`` is the name of the source file
# generated by lemon.  A header file is also be generated, and contains
# the token list.
#
# The options are:
#
# ``COMPILE_FLAGS <flags>``
#   Specify flags to be added to the ``lemon`` command line.
#
# ``DEFINES_FILE <file>``
#   Specify a non-default header ``<file>`` to be generated by ``lemon``.
#
# ``VERBOSE [<file>]``
#   Tell ``lemon`` to write a report file of the grammar and parser.
#   If ``<file>`` is given, it specifies path the report file is copied to.
#   ``[<file>]`` is left for backward compatibility of this module.
#   Use ``VERBOSE REPORT_FILE <file>``.
#
# ``REPORT_FILE <file>``
#   Specify a non-default report ``<file>``, if generated.
#
# The macro defines the following variables:
#
# ``LEMON_<Name>_DEFINED``
#   true is the macro ran successfully
#
# ``LEMON_<Name>_INPUT``
#   The input source file, an alias for <YaccInput>
#
# ``LEMON_<Name>_OUTPUT_SOURCE``
#   The source file generated by lemon
#
# ``LEMON_<Name>_OUTPUT_HEADER``
#   The header file generated by lemon
#
# ``LEMON_<Name>_OUTPUTS``
#   All files generated by lemon including the source, the header and the report
#
# ``LEMON_<Name>_COMPILE_FLAGS``
#   Options used in the ``lemon`` command line
#
# Example usage:
#
# .. code-block:: cmake
#
#   find_package(LEMON)
#   LEMON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp
#                DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/parser.h)
#   add_executable(Foo main.cpp ${LEMON_MyParser_OUTPUTS})

mark_as_advanced(LEMON_EXECUTABLE)

if(LEMON_EXECUTABLE)

  # internal macro
  # sets LEMON_TARGET_cmdopt
  macro(LEMON_TARGET_option_extraopts Options)
    set(LEMON_TARGET_cmdopt "")
    set(LEMON_TARGET_extraopts "${Options}")
    separate_arguments(LEMON_TARGET_extraopts)
    list(APPEND LEMON_TARGET_cmdopt ${LEMON_TARGET_extraopts})
  endmacro()

  # internal macro
  # sets LEMON_TARGET_output_header and LEMON_TARGET_cmdopt
  macro(LEMON_TARGET_option_defines LemonOutput Header)
    if("${Header}" STREQUAL "")
      # default header path generated by lemon (see option -d)
      string(REGEX REPLACE "^(.*)(\\.[^.]*)$" "\\2" _fileext "${LemonOutput}")
      string(REPLACE "c" "h" _fileext ${_fileext})
      string(REGEX REPLACE "^(.*)(\\.[^.]*)$" "\\1${_fileext}"
          LEMON_TARGET_output_header "${LemonOutput}")
#      list(APPEND LEMON_TARGET_cmdopt "-d")
    else()
      set(LEMON_TARGET_output_header "${Header}")
#      list(APPEND LEMON_TARGET_cmdopt "--defines=${LEMON_TARGET_output_header}")
    endif()
  endmacro()

  # internal macro
  # sets LEMON_TARGET_verbose_file and LEMON_TARGET_cmdopt
  macro(LEMON_TARGET_option_report_file LemonOutput ReportFile)
      get_filename_component(LEMON_TARGET_output_path "${LemonOutput}" PATH)
      get_filename_component(LEMON_TARGET_output_name "${LemonOutput}" NAME_WE)
      set(LEMON_TARGET_verbose_file
        "${LEMON_TARGET_output_path}/${LEMON_TARGET_output_name}.out")
      list(APPEND LEMON_TARGET_extraoutputs
        "${LEMON_TARGET_verbose_file}")
  endmacro()

  # internal macro
  # adds a custom command and sets
  #   LEMON_TARGET_cmdopt, LEMON_TARGET_verbose_file, LEMON_TARGET_extraoutputs
#  macro(LEMON_TARGET_option_verbose Name LemonOutput filename)
#    list(APPEND LEMON_TARGET_cmdopt "--verbose")
#    list(APPEND LEMON_TARGET_extraoutputs
#      "${LEMON_TARGET_verbose_file}")
#    if (NOT "${filename}" STREQUAL "")
#      add_custom_command(OUTPUT ${filename}
#        COMMAND ${CMAKE_COMMAND} -E copy
#        "${LEMON_TARGET_verbose_file}"
#        "${filename}"
#        VERBATIM
#        DEPENDS
#        "${LEMON_TARGET_verbose_file}"
#        COMMENT "[LEMON][${Name}] Copying lemon verbose table to ${filename}"
#        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
#      set(LEMON_${Name}_VERBOSE_FILE ${filename})
#      list(APPEND LEMON_TARGET_extraoutputs
#        "${filename}")
#    endif()
#  endmacro()

  #============================================================
  # LEMON_TARGET (public macro)
  #============================================================
  #
  macro(LEMON_TARGET Name LemonInput LemonOutput)
    set(LEMON_TARGET_outputs "${LemonOutput}")
    set(LEMON_TARGET_extraoutputs "")

    # Parsing parameters
    set(LEMON_TARGET_PARAM_OPTIONS
      )
    set(LEMON_TARGET_PARAM_ONE_VALUE_KEYWORDS
      COMPILE_FLAGS
      DEFINES_FILE
      REPORT_FILE
      )
    set(LEMON_TARGET_PARAM_MULTI_VALUE_KEYWORDS
      VERBOSE
      )
    cmake_parse_arguments(
        LEMON_TARGET_ARG
        "${LEMON_TARGET_PARAM_OPTIONS}"
        "${LEMON_TARGET_PARAM_ONE_VALUE_KEYWORDS}"
        "${LEMON_TARGET_PARAM_MULTI_VALUE_KEYWORDS}"
        ${ARGN}
    )

    if(NOT "${LEMON_TARGET_ARG_UNPARSED_ARGUMENTS}" STREQUAL "")
      message(SEND_ERROR "Usage")
    elseif("${LEMON_TARGET_ARG_VERBOSE}" MATCHES ";")
      # [VERBOSE [<file>] hack: <file> is non-multi value by usage
      message(SEND_ERROR "Usage")
    else()

      LEMON_TARGET_option_extraopts("${LEMON_TARGET_ARG_COMPILE_FLAGS}")
      LEMON_TARGET_option_defines("${LemonOutput}" "${LEMON_TARGET_ARG_DEFINES_FILE}")
      LEMON_TARGET_option_report_file("${LemonOutput}" "${LEMON_TARGET_ARG_REPORT_FILE}")

      list(APPEND LEMON_TARGET_outputs "${LEMON_TARGET_output_header}")

      add_custom_command(OUTPUT ${LEMON_TARGET_outputs}
        ${LEMON_TARGET_extraoutputs}
        COMMAND ${LEMON_EXECUTABLE} ${LemonInput} ${LEMON_TARGET_cmdopt}
        VERBATIM
        DEPENDS ${LemonInput}
        COMMENT "[LEMON][${Name}] Building parser with lemon ${LEMON_VERSION}"
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

      # define target variables
      set(LEMON_${Name}_DEFINED TRUE)
      set(LEMON_${Name}_INPUT ${LemonInput})
      set(LEMON_${Name}_OUTPUTS ${LEMON_TARGET_outputs} ${LEMON_TARGET_extraoutputs})
      set(LEMON_${Name}_COMPILE_FLAGS ${LEMON_TARGET_cmdopt})
      set(LEMON_${Name}_OUTPUT_SOURCE "${LemonOutput}")
      set(LEMON_${Name}_OUTPUT_HEADER "${LEMON_TARGET_output_header}")

    endif()
  endmacro()
  #
  #============================================================

endif()

include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(LEMON REQUIRED_VARS  LEMON_EXECUTABLE
                                        VERSION_VAR LEMON_VERSION)
